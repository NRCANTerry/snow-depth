from PollyReports import *
from reportlab.pdfgen.canvas import Canvas

LEFT_MARGIN = 20
RIGHT_MARGIN = 475
RIGHT_DATA = 450

# dictionary with header locations and header text
headers = {
    "Lower HSV 1": "General",
    "Filtering Time": "Image Selection",
    "Equalization Time": "Equalization",
    "Registration Time": "Registration",
    "Check Time": "Stake Verification",
    "Intersection Time": "Intersection",
    "Calculation Time": "Depth Calculation"
}

index = 0 # index of header accessed
written = list() # list of written headers

def insertHeader(string):
    """
    Function to return whether to insert a header

    Keyword arguments:
    string -- input string (a header is returned when the string is part of
        the header dictionary keys set)
    """

    global index
    global written

    # determine whether string is valid
    if string in headers.keys() and string not in written:
        index += 1
        written.append(string)

    # return index of last header
    return index

def getHeader(string):
    """
    Function to get header text

    Keyword arguments:
    string -- input string (a header is returned when the string is part of
        the header dictionary keys set)
    """
    if string in headers.keys():
        return headers[string]

index_individual = -1
previous_string = ""
index_access = 0

def insertIndividualHeader(string):
    """
    Function to return whether to insert an individual (image name) header

    Keyword arguments:
    string -- input string (a header is returned when "Valid Image" is written
        to the file since this is the first entry per image)
    """

    global index_individual
    global previous_string

    # determine whether string is valid
    if string == "Valid Image" and previous_string != "Valid Image":
        index_individual += 1

    # update previous string variable
    previous_string = string

    # return index
    return index_individual

# list of image names (headers)
individualHeaders = []

# returns individual header text
def getIndividualHeader(string):
    """
    Function to get individual header text (image names)

    Keyword arguments:
    string -- input string (a header is returned when "Valid Image" is written
        to the file since this is the first entry per image)
    """

    global index_access
    if string == "Valid Image":
        index_access += 1
        return individualHeaders[index_access-1]

def generate(summary, individualSummary, path):
    """
    Function to generate PDF summaries for the run

    Keyword arguments:
    summary -- dictionary containing information about the run and environment
    individualSummary -- dictionary contianing information about each image
        that was processed
    path -- output path for summary PDF files
    """

    # must provide report class with datasource
    data = []
    for key, value in summary.items():
        if key != "start" and key != "HSVRange" and key != "regRestrictions":
            data.append((key, value))

        if key == "HSVRange":
            data.append(("Lower HSV 1", value[0]))
            data.append(("Upper HSV 1", value[1]))
            data.append(("Lower HSV 2", value[2]))
            data.append(("Upper HSV 2", value[3]))

        elif key == "regRestrictions":
            data.append(("Max Rotation", value[0]))
            data.append(("Max Translation", value[1]))
            data.append(("Max Scaling", value[2]))

    # generate individual datasource
    indData = []
    for key, value in individualSummary.items():
        individualHeaders.append(key)
        for xkey, xvalue in value.items():
            indData.append((xkey, xvalue))

    # create report object
    rpt = Report(datasource=data)

    # create header
    rpt.pageheader = Band([
        Element((LEFT_MARGIN, 0), ("Helvetica-Bold", 28), text="Summary"),
        Element((LEFT_MARGIN, 30), ("Helvetica", 16), text=summary.start.strftime(
            "%b %d, %Y at %H:%M")),
    ])

    # main portion of report
    rpt.detailband = Band([
        Element((LEFT_MARGIN, 3), ("Helvetica", 14), key=0),
        Element((RIGHT_MARGIN, 3), ("Helvetica", 14), key=1, align="right")
    ])

    rpt.groupheaders = [
        Band([
            Element((LEFT_MARGIN, 13), ("Helvetica-Bold", 18),
                getvalue = lambda x: getHeader(x[0]), format = lambda x: "%s" % x)
        ], getvalue=lambda x: insertHeader(x[0]))
    ]

    # create footer
    rpt.pagefooter = Band([
        Element((LEFT_MARGIN, 16), ("Helvetica-Bold", 12), sysvar="pagenumber",
            format=lambda x: "Page %d" % x),
        Element((RIGHT_MARGIN, 16), ("Helvetica", 12), text="Generated By Snow Depth Utility",
            align="right")
    ])

    # create individual report
    indRpt = Report(datasource=indData)

    # create header
    indRpt.pageheader = Band([
        Element((LEFT_MARGIN, 0), ("Helvetica-Bold", 28), text="Image Summary"),
        Element((LEFT_MARGIN, 30), ("Helvetica", 16), text=summary.start.strftime(
            "%b %d, %Y at %H:%M")),
    ])

    # main portion of report
    indRpt.detailband = Band([
        Element((LEFT_MARGIN, 3), ("Helvetica", 14), key=0),
        Element((RIGHT_MARGIN, 3), ("Helvetica", 14), key=1, align="right")
    ])

    indRpt.groupheaders = [
        Band([
            Element((LEFT_MARGIN, 13), ("Helvetica-Bold", 16),
                getvalue = lambda x: getIndividualHeader(x[0]), format = lambda x: "%s" % x)
        ], getvalue=lambda x: insertIndividualHeader(x[0]))
    ]

    # create footer
    indRpt.pagefooter = Band([
        Element((LEFT_MARGIN, 16), ("Helvetica-Bold", 12), sysvar="pagenumber",
            format=lambda x: "Page %d" % x),
        Element((RIGHT_MARGIN, 16), ("Helvetica", 12), text="Generated By Snow Depth Utility",
            align="right")
    ])

    # save pdf to snow-depth directory
    canvas = Canvas(path + "summary.pdf")
    rpt.generate(canvas)
    canvas.save()

    indCanvas = Canvas(path + "image_summary.pdf")
    indRpt.generate(indCanvas)
    indCanvas.save()
